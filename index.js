// array.concat - використовується для об'єднання двох або більше масивів у новий масив (немутуючий)
// array.fill - використовується для заповнення всіх елементів масиву якимсь одним значенням (мутуючий)
// array.includes - використовується для перевірки наявності певного значення у масиві (немутуючий)
// array.indexOf - використовується для отримання першого входження певного значення у масиві (немутуючий)
// array.join - використовується для створення рядка, об'єднуючи всі елементи масиву (немутуючий)
// array.push - використовується для додавання одного або кількох елементів у кінець (мутуючий)
// array.pop - використовується для видалення останнього елементу (мутуючий
// array.shift - використовується для видалення першого елементу з початку масиву (мутуючий)
// array.unshift - використовується для додавання одного або декількох елементів на початок масиву (мутуючий)
// array.unshift(element1, element2, ..., elementN)
// array.reverse - використовується для зміни порядку елементів у масиві на протилежний (мутуючий)
// Методи, які змінюють вихідний масив - мутуючі методи
// Методи, які НЕ змінюють вихідний масив - немутуючі методи (більшість методів масиву)
// array.slice - використовується для сворення нового масиву який складається з якоїсь певної кількості частин вихідного масиву
// array.slice(start, end) - старт включно, енд не включно
// array.splice - використовується для зміни  вмісту масиву шляхом видалення заміни або додавання нових елементів
// array.splice(start, deleteCount1, ....items)
//              start - початковий індекс, з якого починаємо змінювати масив
//              deleteCount - скільки елементів потрібно відалити з масиву починаючи зі старт
//              ...items - новіелементи які будуть вставлені на місце видалених
/*
const users=[{
    name: 'John',
    lastName: 'Doe'
},{
    name: 'Jane',
    lastName: 'Doe'
},{
    name: 'Jack',
    lastName: 'Dosh'
}

]

const newUsers = users.slice() //Поверхнева копія

newUsers[0].name = 'Alex'

*/
/*
Мутація - зміна
Мутабельне - те що не може бути змінено
Іммутабельне - те що не може бути мутоване

*/
/*
const user = {
    name: 'John',
    lastName: 'Doe'
}

user.isHungry = false;

//ПРимітивні типи  -  іммутабельні

const arr = [1,2,3,4,5]

arr.splice(2,1);//[1,2,4,5]

arr.splice(2,0,'hello')
*/
const arr = [1,2,3,4,5]
arr.splice(1,0,'w','tr-td')

arr.splice(6,0,'vv')
arr.push('aa')

function isDoubleElement(array){
    for(let i=0;i<array.lenght;i++){
        if(array[i]===array[i+1]){

        }
    }
    return false;


}